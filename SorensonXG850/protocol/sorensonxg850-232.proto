locktimeout = 10000;
replytimeout = 5000;
readtimeout  = 3000;
writetimeout = 100;
extrainput   = Ignore;
MaxInput = 0;
Terminator = CR;

# set output main voltage
setOutpVolt {
	out "*adr \$1;sour:volt %.5f"; #:volt
	wait 500;
}

getOutpVolt {
	out "*adr \$1;sour:volt?";
	in  "%f";
}

# set output main current
setOutpCurr {
	out "*adr \$1;sour:curr %.5f"; #:curr
	wait 500;
}

getOutpCurr {
	out "*adr \$1;sour:curr?";
	in  "%f";
}

# measure voltage/current
measVolt {
	out "*adr \$1;meas:volt?";
	in  "%f";
}

measCurr {
	out "*adr \$1;meas:curr?";
	in  "%f";
}

#Enable/disable output power main
setOutpMain {
	out "*adr \$1;outp %{off|on}";
	wait 500;
}

getOutpMain {
	out "*adr \$1;outp?";
	in  "%{0|1}";
}

# Enable the auxiliary output
setOutpAux {
	out "*adr \$1;outp:aux %{off|on}";
	wait 500;
}

getOutpAux {
	out "*adr \$1;outp:aux?";
	in  "%{0|1}";
}

# Output auto start mode
setOutpPOn {
	out "*adr \$1;outp:pon %{off|on}";
	wait 500;
}

getOutpPOn {
	out "*adr \$1;outp:pon?"
	in  "%{0|1}";
}

# Auxliary auto start mode
setOutpAuxPOn {
	out "*adr \$1;outp:aux:pon %{off|on}";
	wait 500;
}

getOutpAuxPOn{
	out "*adr \$1;outp:aux:pon?";
	in  "%{0|1}";
}

# Clear flash failure alarm
clearFlashFailAlrm {
	out "*adr \$1;outp:prot:cle";
	wait 500;
}

# set foldback mode
setFoldMode {
	out "*adr \$1;outp:prot:fold %{NONE|CV|CC}";
	wait 500;
}

getFoldMode {
	out "*adr \$1;outp:prot:fold?";
	in "Foldback Mode: %{NONE|CV|CC}";
}

# set foldback delay
setFoldDly {
	out "*adr \$1;outp:prot:fold:del %f"; # 0.5-50s
	wait 500;
}

getFoldDly {
	out "*adr \$1";	
	out "outp:prot:fold:del?";
	in  "%f";
}

# Reset activated foldback protection
resetFoldProt {
	out "*adr \$1;outp:prot:cle";
	wait 500;
}

# Set OVP setpoint
setOVPSP {
	out "*adr \$1;sour:volt:prot:over %f"; # 75-95
	wait 500;
}

getOVPSP {
	out "*adr \$1;sour:volt:prot:over?";
	in  "%f";
}

# Get UVP setpoint
getUVPSP {
	out "*adr \$1;sour:volt:prot:und?";
	in  "%f"; # (couldn't set, needs to know why)
}

# GetOCPSP (read only)
getOCPSP {
	out "*adr \$1;sour:curr:prot?";
	in  "%f"; # 11.55
}

#OTP mode, just set from front panel, no remote control

# Set interlock function
setIntlkProt {
	out "*adr \$1;sens:prot:int %{off|on}";
	wait 500;
}

getIntlkProt {
	out "*adr \$1;sens:prot:int?";
	in  "%{0|1}";
}

# enable/disable 0 voltage output reset at power-on
set0VoltPOn {
	out "*adr \$1;syst:pon:volt %{off|on}";
	wait 500;
}

get0VoltPOn {
	out "*adr \$1;syst:pon:volt?";
	in  "%{0|1}";
}

# enable/disable 0 voltage output preset upon output enable
set0VoltOutpEnbl{
	out "*adr \$1;syst:pon:ena:volt %{off|on}";
	wait 500;
}

get0VoltOutpEnbl {
	out "*adr \$1;syst:pon:ena:volt?";
	in  "%{0|1}";
}

# enable/disable 0 current output reset at power-on
set0CurrPOn {
	out "*adr \$1;syst:pon:curr %{off|on}";
	wait 500;
}

get0CurrPOn {
	out "*adr \$1;syst:pon:curr?";
	in  "%{0|1}";
}

# enable/disable 0 current output preset upon output enable
set0CurrOutpEnbl {
	out "*adr \$1;syst:pon:ena:curr %{off|on}";
	wait 500;
}

get0CurrOutpEnbl {
	out "*adr \$1;syst:pon:ena:curr?";
	in  "%{0|1}";
}

# save/recall settings
saveSettings {
	out "*adr \$1;syst:save %{1|2|3}";
	wait 500;
}

recallSettings {
	out "*adr \$1;syst:rec %{1|2|3}";
	wait 500;
}

# enable/disable local lockout
setLocalLock{
	out "*adr \$1;syst:rem:stat %{local|remote}";
	wait 500;
}

getLocalLock {
	out "*adr \$1;syst:rem:stat?";
	in  "Front Panel %{Unlocked|Locked}";
}

# set controller/slave unit
setUnitMode {
	out "*adr \$1;sour:comb:csh %{controller|slave}";
	wait 500;
}

getUnitMode {
	out "*adr \$1;sour:comb:csh?";
	in  "%{CONTroller|SLAVe}";
}

# voltage-controlled voltage APG
setVoltAPG {
	out "*adr \$1;syst:rem:sour:volt %{LOCAL|IAVoltage|AVOLtage|IAResistive|ARESistive}";
	wait 500;
}

getVoltAPG {
	out "*adr \$1;syst:rem:sour:volt?";
	in  "%{Voltage mode: LOCAL|Analog Isolated|Analog Non-isolated|Resistor Isolated|Resistor Non-isolated}";
}

# Set analog voltage input level
setAPRVoltLevel {
	out "*adr \$1;syst:comm:apr:lev:volt %f"; # 2-10
	wait 500;
}

getAPRVoltLevel {
	out "*adr \$1;syst:comm:apr:lev:volt?";
	in  "%f";
}

# measure apr voltage
getAPRVolt {
	out "*adr \$1;meas:apr:volt?";
	in  "%f";
}

# voltage-controlled current APG
setCurrAPG {
	out "*adr \$1;syst:rem:sour:curr %{LOCAL|IAVoltage|AVOLtage|IAResistive|ARESistive}";
	wait 500;
}

getCurrAPG {
	out "*adr \$1;syst:rem:sour:curr?";
	in  "Current mode: %{LOCAL|Analog Isolated|Analog Non-isolated|Resistor Isolated|Resistor Non-isolated}";
}

# Set analog current input level
setAPRCurrLevel {
	out "*adr \$1;syst:comm:apr:lev:curr %f"; # 2-10
	wait 500;
}

getAPRCurrLevel {
	out "*adr \$1;syst:comm:apr:lev:curr?";
	in  "%f";
}

# error
#error {
#	out "*adr \$1;syst:err?";
#	out "%*d, "%s";
#}

# reset
reset {
	out "*adr \$1;syst:res";
	wait 500;
}

# Get operation condition
getOprSts {
	out "*adr \$1;stat:oper:cond?";
	in  "%d";
}

